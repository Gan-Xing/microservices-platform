# 标准版本 Docker Compose 配置
# 专为100租户、10万用户、1000 QPS优化
# 总内存需求: 8GB

version: '3.8'

services:
  # ===========================================
  # 核心基础设施 (5个组件)
  # ===========================================

  # PostgreSQL - 主数据库 (2GB内存)
  postgres:
    image: postgres:15-alpine
    container_name: platform-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: platform_password
      POSTGRES_DB: platform_main
      # 性能优化配置
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1536MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    ports:
      - "5432:5432"
    networks:
      - platform-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform_user -d platform_main"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 缓存和消息队列 (1GB内存)
  redis:
    image: redis:7-alpine
    container_name: platform-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - platform-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus - 监控指标收集 (512MB内存)
  prometheus:
    image: prom/prometheus:latest
    container_name: platform-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.max-block-duration=2h'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - platform-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - 监控可视化 (256MB内存)
  grafana:
    image: grafana/grafana:latest
    container_name: platform-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - platform-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - S3兼容文件存储 (256MB内存)
  minio:
    image: minio/minio:latest
    container_name: platform-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - platform-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===========================================
  # 12个微服务 (3GB总内存)
  # ===========================================

  # API网关服务 (512MB - 高负载)
  api-gateway:
    build: ./apps/api-gateway-service
    container_name: platform-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=api-gateway-service
      - SERVICE_PORT=3000
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=400
      - DB_POOL_SIZE=20
      - REDIS_POOL_SIZE=10
    ports:
      - "3000:3000"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 认证授权服务 (512MB - 高负载)
  auth-service:
    build: ./apps/auth-service
    container_name: platform-auth-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=3001
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=400
      - DB_POOL_SIZE=20
      - REDIS_POOL_SIZE=10
    ports:
      - "3001:3001"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 权限管理服务 (256MB - 中等负载)
  rbac-service:
    build: ./apps/rbac-service
    container_name: platform-rbac-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=rbac-service
      - SERVICE_PORT=3002
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3002:3002"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户管理服务 (256MB - 中等负载)
  user-management-service:
    build: ./apps/user-management-service
    container_name: platform-user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=user-management-service
      - SERVICE_PORT=3003
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3003:3003"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 多租户管理服务 (256MB - 中等负载)
  tenant-management-service:
    build: ./apps/tenant-management-service
    container_name: platform-tenant-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=tenant-management-service
      - SERVICE_PORT=3004
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3004:3004"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 消息通知服务 (256MB - 中等负载)
  notification-service:
    build: ./apps/notification-service
    container_name: platform-notification-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=3005
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3005:3005"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 文件存储服务 (256MB - 中等负载)
  file-storage-service:
    build: ./apps/file-storage-service
    container_name: platform-file-storage-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=file-storage-service
      - SERVICE_PORT=3006
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3006:3006"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
      - minio
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 (256MB - 中等负载)
  monitoring-service:
    build: ./apps/monitoring-service
    container_name: platform-monitoring-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=monitoring-service
      - SERVICE_PORT=3007
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3007:3007"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 审计服务 (256MB - 中等负载)
  audit-service:
    build: ./apps/audit-service
    container_name: platform-audit-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=audit-service
      - SERVICE_PORT=3008
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - USE_POSTGRESQL_SEARCH=true  # 使用PostgreSQL全文搜索替代ES
      - NODE_OPTIONS=--max-old-space-size=200
      - DB_POOL_SIZE=10
      - REDIS_POOL_SIZE=5
    ports:
      - "3008:3008"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 任务调度服务 (128MB - 低负载)
  scheduler-service:
    build: ./apps/scheduler-service
    container_name: platform-scheduler-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=scheduler-service
      - SERVICE_PORT=3009
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=100
      - DB_POOL_SIZE=5
      - REDIS_POOL_SIZE=3
    ports:
      - "3009:3009"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.125'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 消息队列服务 (128MB - 低负载)
  message-queue-service:
    build: ./apps/message-queue-service
    container_name: platform-message-queue-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=message-queue-service
      - SERVICE_PORT=3010
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - USE_REDIS_STREAMS=true  # 使用Redis Streams替代Kafka
      - NODE_OPTIONS=--max-old-space-size=100
      - DB_POOL_SIZE=5
      - REDIS_POOL_SIZE=3
    ports:
      - "3010:3010"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.125'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 缓存服务 (128MB - 低负载)
  cache-service:
    build: ./apps/cache-service
    container_name: platform-cache-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=cache-service
      - SERVICE_PORT=3011
      - DATABASE_URL=postgresql://platform_user:platform_password@postgres:5432/platform_main
      - REDIS_URL=redis://:redis_password@redis:6379
      - NODE_OPTIONS=--max-old-space-size=100
      - DB_POOL_SIZE=5
      - REDIS_POOL_SIZE=3
    ports:
      - "3011:3011"
    networks:
      - platform-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.125'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# 存储卷定义
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# ===========================================
# 网络定义
# ===========================================
networks:
  platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16