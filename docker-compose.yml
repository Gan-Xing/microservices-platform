# 标准版本 Docker Compose 配置 (优化版)
# 专为100租户、10万用户、1000 QPS优化
# 总内存需求: 8GB (基础设施3.5GB + 微服务4.5GB)
# 总CPU需求: 3.55核心 (优化后分配，高效利用资源)
# Grafana访问地址: http://localhost:8300 (避免端口冲突)

version: '3.8'

services:
  # ===========================================
  # 核心基础设施 (3.5GB内存)
  # PostgreSQL(1.5GB) + Redis(1GB) + Prometheus(384MB) + Grafana(256MB) + MinIO(256MB)
  # ===========================================

  # PostgreSQL - 主数据库 (1.5GB内存)
  postgres:
    image: postgres:15-alpine
    container_name: platform-postgres
    restart: unless-stopped
    env_file: .env
    command: [
      "postgres",
      "-c", "shared_buffers=512MB",
      "-c", "effective_cache_size=1536MB",
      "-c", "work_mem=8MB",
      "-c", "maintenance_work_mem=128MB",
      "-c", "max_connections=500",
      "-c", "wal_buffers=16MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "random_page_cost=1.1"
    ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # PostgreSQL性能参数通过command传递
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    ports:
      - "5432:5432"
    networks:
      - platform-network
    mem_limit: 1536M
    memswap_limit: 1536M
    cpus: 0.7
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 缓存和消息队列 (1GB内存)
  redis:
    image: redis:7-alpine
    container_name: platform-redis
    restart: unless-stopped
    env_file: .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy volatile-lru --appendonly yes --databases 16
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - platform-network
    mem_limit: 1G
    memswap_limit: 1G
    cpus: 0.4
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus - 监控指标收集 (384MB内存)
  prometheus:
    image: prom/prometheus:latest
    container_name: platform-prometheus
    restart: unless-stopped
    env_file: .env
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.max-block-duration=2h'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - platform-network
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - 监控可视化 (256MB内存)
  grafana:
    image: grafana/grafana:latest
    container_name: platform-grafana
    restart: unless-stopped
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "8300:3000"
    networks:
      - platform-network
    depends_on:
      prometheus:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - S3兼容文件存储 (256MB内存)
  minio:
    image: minio/minio:latest
    container_name: platform-minio
    restart: unless-stopped
    env_file: .env
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - platform-network
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===========================================
  # 12个微服务 (4.5GB总内存)
  # API网关(512MB) + 认证(512MB) + RBAC(384MB) + 用户(256MB) + 租户(384MB) + 通知(384MB) + Worker(256MB) + 文件(384MB) + 监控(384MB) + 审计(256MB) + 调度(256MB) + 队列(256MB) + 缓存(256MB)
  # ===========================================

  # API网关服务 (512MB - 高负载)
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway-service/Dockerfile
    container_name: platform-api-gateway
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=api-gateway-service
      - SERVICE_PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3000:3000"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 512M
    memswap_limit: 512M
    cpus: 0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 认证授权服务 (512MB - 高负载)
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: platform-auth-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3001:3001"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 512M
    memswap_limit: 512M
    cpus: 0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 权限管理服务 (384MB - 中等负载)
  rbac-service:
    build:
      context: .
      dockerfile: apps/rbac-service/Dockerfile
    container_name: platform-rbac-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=rbac-service
      - SERVICE_PORT=3002
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3002:3002"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 用户管理服务 (256MB - 中等负载)
  user-management-service:
    build:
      context: .
      dockerfile: apps/user-management-service/Dockerfile
    container_name: platform-user-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=user-management-service
      - SERVICE_PORT=3003
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3003:3003"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 多租户管理服务 (384MB - 复杂业务)
  tenant-management-service:
    build:
      context: .
      dockerfile: apps/tenant-management-service/Dockerfile
    container_name: platform-tenant-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=tenant-management-service
      - SERVICE_PORT=3004
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3004:3004"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 消息通知服务 (384MB - 复杂业务)
  notification-service:
    build:
      context: .
      dockerfile: apps/notification-service/Dockerfile
    container_name: platform-notification-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3005:3005"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 消息通知Worker (共享配置)
  notification-worker:
    build:
      context: .
      dockerfile: apps/notification-service/Dockerfile.worker
    container_name: platform-notification-worker
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=notification-worker
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 文件存储服务 (384MB - 中等负载)
  file-storage-service:
    build:
      context: .
      dockerfile: apps/file-storage-service/Dockerfile
    container_name: platform-file-storage-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=file-storage-service
      - SERVICE_PORT=3006
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/6
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    ports:
      - "3006:3006"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 监控服务 (384MB - 复杂业务)
  monitoring-service:
    build:
      context: .
      dockerfile: apps/monitoring-service/Dockerfile
    container_name: platform-monitoring-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=monitoring-service
      - SERVICE_PORT=3007
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/7
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    ports:
      - "3007:3007"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
    mem_limit: 384M
    memswap_limit: 384M
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 审计服务 (256MB - 中等负载)
  audit-service:
    build:
      context: .
      dockerfile: apps/audit-service/Dockerfile
    container_name: platform-audit-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=audit-service
      - SERVICE_PORT=3008
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/8
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - USE_POSTGRESQL_SEARCH=true
    ports:
      - "3008:3008"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 任务调度服务 (256MB - 中等负载)
  scheduler-service:
    build:
      context: .
      dockerfile: apps/scheduler-service/Dockerfile
    container_name: platform-scheduler-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=scheduler-service
      - SERVICE_PORT=3009
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/9
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3009:3009"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 消息队列服务 (256MB - 中等负载)
  message-queue-service:
    build:
      context: .
      dockerfile: apps/message-queue-service/Dockerfile
    container_name: platform-message-queue-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=message-queue-service
      - SERVICE_PORT=3010
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/10
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - USE_REDIS_STREAMS=true
    ports:
      - "3010:3010"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 缓存服务 (256MB - 中等负载)
  cache-service:
    build:
      context: .
      dockerfile: apps/cache-service/Dockerfile
    container_name: platform-cache-service
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=cache-service
      - SERVICE_PORT=3011
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/11
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "3011:3011"
    networks:
      - platform-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 256M
    memswap_limit: 256M
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ===========================================
# 存储卷定义
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# ===========================================
# 网络定义
# ===========================================
networks:
  platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24